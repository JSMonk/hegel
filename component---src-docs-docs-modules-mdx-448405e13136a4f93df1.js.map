{"version":3,"sources":["webpack:///../src/docs/docs/modules.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ocAMO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,uBACA,uOACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,+HAQL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,4KAQL,sM,yMAKJJ,EAAWK,gBAAiB","file":"component---src-docs-docs-modules-mdx-448405e13136a4f93df1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/hegel/hegel/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"modules\"\n    }}>{`Modules`}</h1>\n    <hr></hr>\n    <p>{`Sometimes you need to use a type which is declared in other module. So, you need a mechanism of importing/exporting types from different modules. Hegel provides ECMAScript modules like syntax for this case.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// ./modules/a.js\nexport class A {}\nexport type B = {};\nexport default class Main {}\nexport const MY_OWN_CONST = 42;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// ./modules/b.js\nimport type Main, { A, B, MY_OWN_CONST } from \"./b.js\";\n\n// Error: Type \"22\" is incompatible with type \"42\"\nconst NEW_CONST: MY_OWN_CONST = 22;\n`}</code></pre>\n    <p>{`As you can see, you can import type of values without actual value importing. It means that the same as other \"type imports\", this imports will be removed by compiler.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}