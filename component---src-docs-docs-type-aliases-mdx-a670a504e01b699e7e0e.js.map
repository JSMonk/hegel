{"version":3,"sources":["webpack:///../src/docs/docs/type-aliases.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ocAMO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBACA,6KACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,6VAoBL,gJAC4C,0BAAYA,WAAW,KAAvB,QAD5C,yCACsI,0BAAYA,WAAW,KAAvB,KADtI,sFAC0Q,0BAAYA,WAAW,KAAvB,KAD1Q,KAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2YAoBL,4GACA,iBAAQ,CACN,GAAM,cADR,cAGA,yCAAwB,0BAAYA,WAAW,KAAvB,cAAxB,iCAAgH,mBAAGA,WAAW,KAAQ,CAClI,KAAQ,sBADoG,eAAhH,2DAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6bA2BL,8BACE,iBAAGA,WAAW,cAAd,oG,8MAMNJ,EAAWK,gBAAiB","file":"component---src-docs-docs-type-aliases-mdx-a670a504e01b699e7e0e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/hegel/hegel/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"type-aliases\"\n    }}>{`Type Aliases`}</h1>\n    <hr></hr>\n    <p>{`Sometimes your type annotations become really long, so you need some mechanisms which help you not repeat yourself. And prevent \"copy-paste\" errors.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const user: {\n  email: string;\n  password: string;\n} = { email: \"test.email@gmail.com\", password: \"qwerty\" };\n\nconst copyOfOriginalUser: {\n  email: string;\n  password: string;\n} = user;\n\n//-------------------\n\nfunction createResponse(\n  status: \"Success\" | \"Failed\"\n): { status: \"Success\" | \"Failed\" } {\n  return { status };\n}\n`}</code></pre>\n    <p>{`One of them is type alisases. Type aliases create a new name for a type.\nType aliases can be created using the keyword `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` followed by its name, an equals sign `}<inlineCode parentName=\"p\">{`=`}</inlineCode>{`, and a type definition. You can place any valid type definition after equals sign `}<inlineCode parentName=\"p\">{`=`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Type alias for object type\ntype User = {\n  email: string;\n  password: string;\n};\n\nconst user: User = { email: \"test.email@gmail.com\", password: \"qwerty\" };\nconst copyOfOriginalUser: User = user;\n\n//-------------------\n\n// Type alias for union type\ntype Status = \"Success\" | \"Failed\";\n\nfunction createResponse(status: Status): { status: Status } {\n  return { status };\n}\n`}</code></pre>\n    <p>{`Aliasing doesnâ€™t create a new type - it creates a new name to refer to source type.`}</p>\n    <h2 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h2>\n    <p>{`Also you can use `}<inlineCode parentName=\"p\">{`implements`}</inlineCode>{` with object type aliases for `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/class-types\"\n      }}>{`Class Types`}</a>{` to tell Hegel that you want class to match \"protocol\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type JsonSerializable = {\n  toJSON: () => Object,\n  ...\n};\n\nclass User implements JsonSerializable {\n  email: string;\n  password: string;\n\n  constructor(email, password) {\n    this.email = email;\n    this.password = password;\n  }\n\n  toJSON() {\n    return {\n      email: this.email,\n      password: this.password,\n      _type: \"User\"\n    };\n  }\n}\n\nconst json: JsonSerializable = new User(\"test@gmail.com\", \"qwerty\");\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note, that your object type which should act like interface should be a soft object type.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}