{"version":3,"sources":["webpack:///../src/docs/docs/union-types.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ocAMO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,uBACA,qLAAoK,0BAAYC,WAAW,KAAvB,UAApK,2CAAkQ,0BAAYA,WAAW,KAAvB,UAAlQ,OAA4T,0BAAYA,WAAW,KAAvB,UAA5T,8BAA6Y,0BAAYA,WAAW,KAAvB,KAA7Y,WACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iJASL,wDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wOAWL,yFAAwE,0BAAYA,WAAW,KAAvB,WAAxE,uCAC0B,0BAAYA,WAAW,KAAvB,MAD1B,yBAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iTAcL,+GACA,oKAAmJ,0BAAYA,WAAW,KAAvB,KAAnJ,+EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8LAQL,8BACE,iBAAGA,WAAW,cAAd,oFAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8RAUL,yCAAwB,0BAAYA,WAAW,KAAvB,UAAxB,kCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mSAYL,gHACA,iHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wT,6MAgBTJ,EAAWK,gBAAiB","file":"component---src-docs-docs-union-types-mdx-fd7fefb59159e621f3fc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/hegel/hegel/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"union-types\"\n    }}>{`Union Types`}</h1>\n    <hr></hr>\n    <p>{`Sometimes you need more than one type or need to concrete values from any of existed type. A simple example when you need values from two different types is `}<inlineCode parentName=\"p\">{`repeat`}</inlineCode>{` function, which is waiting argument as `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` and repeat given argument `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` times:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function repeat(target, times) {\n  if (typeof target === \"number\") {\n    return target ** times;\n  }\n  return target.repeat(times);\n}\n`}</code></pre>\n    <p>{`You can define types like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function repeat(target: unknown, times: number): unknown {\n  if (typeof target === \"number\") {\n    return target ** times;\n  }\n\n  // Error: Property \"repeat\" does not exist in \"unknown\"\n  return target.repeat(times);\n}\n`}</code></pre>\n    <p>{`But you will have an Error, because you try to get property from `}<inlineCode parentName=\"p\">{`unknown`}</inlineCode>{` type.\nYou can try to add one more `}<inlineCode parentName=\"p\">{`if`}</inlineCode>{` statement like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function repeat(target, times) {\n  if (typeof target === \"number\") {\n    return target ** times;\n  }\n  if (typeof target === \"string\") {\n    return target.repeat(times);\n  }\n  throw new TypeError(\\`Expected string or number, got '\\${typeof target}'.\\`);\n}\n\nconst result = repeat(false, 4);\n`}</code></pre>\n    <p>{`But, if you put a wrong type (not number or string) you will find an error in runtime.`}</p>\n    <p>{`So, the solution is union types. Actually, union types is a union of all possible values for types which will be provided to union operator `}<inlineCode parentName=\"p\">{`|`}</inlineCode>{`. You can define it by declaring sequence of needed types separated by '|':`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`let iCanBeAStringOrNumber: string | number = 2;\niCanBeAStringOrNumber = \"Hello\";\n\n// Error: Type \"false\" is incompatible with type \"number | string\"\niCanBeAStringOrNumber = false;\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`When you defined union type you lost ability to use this type as concrete type.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const iCanBeAStringOrNumber: string | number = 2;\n\n// Error: Type \"number | string\" is incompatible with type \"number\"\nconst value: number = iCanBeAStringOrNumber;\n\n// Error: Parameter \"number | string\" is incompatible with type \"bigint | number\"\niCanBeAStringOrNumber * 4;\n`}</code></pre>\n    <p>{`With union types `}<inlineCode parentName=\"p\">{`repeat`}</inlineCode>{` function will look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function repeat(target: string | number, times: number): string | number {\n  if (typeof target === \"number\") {\n    return target ** times;\n  }\n  return target.repeat(times);\n}\n\n// Error: Type \"false\" is incompatible with type \"number | string\"\nconst result = repeat(false, 4);\n`}</code></pre>\n    <p>{`And you will see wrong execution in static time (while you are writing code in editor).`}</p>\n    <p>{`Also, union types are usefull when you want to pick only concrete values from some type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function createResponse(status: \"Success\" | \"Failed\") {\n  return { status };\n}\n\nlet response = createResponse(\"Success\");\nresponse = createResponse(\"Failed\");\n\n// Error: Type \"'Custom String'\" is incompatible with type \"'Failed' | 'Success'\"\nresponse = createResponse(\"Custom String\");\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}