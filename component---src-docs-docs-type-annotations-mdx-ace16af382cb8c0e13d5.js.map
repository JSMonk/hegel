{"version":3,"sources":["webpack:///../src/docs/docs/type-annotations.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ocAMO,IAAMA,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,uBACA,+EACA,oIACA,uFACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,+CAML,+EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6GAOL,mMAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+DAML,4EAA2D,mBAAGA,WAAW,KAAQ,CAC7E,KAAQ,4TAD+C,cAA3D,mHAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6X,kNAqBTJ,EAAWK,gBAAiB","file":"component---src-docs-docs-type-annotations-mdx-ace16af382cb8c0e13d5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/hegel/hegel/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"type-annotations\"\n    }}>{`Type Annotations`}</h1>\n    <hr></hr>\n    <p>{`Type Annotations it's the most valuable part of Hegel.`}</p>\n    <p>{`Type Annotation is an ability to declare values that are valid for the variable. Lets explore this ability.`}</p>\n    <p>{`First of all, lets write a simple function in pure JavaScript.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function mul(a, b) {\n  return a * b;\n}\n`}</code></pre>\n    <p>{`So, you can apply this function with different values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`mul(42, 42); // 1764\nmul(42, \"42\"); // 1764\nmul(true, \"42\"); // 42\nmul(class User {}, \"42\"); // NaN\n`}</code></pre>\n    <p>{`As you can see, applying this function with different data types sometimes will return a valid result.\nBut, you always want to get a valid result. So, you can add types.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function mul(a: number, b: number) {\n  return a * b;\n}\n`}</code></pre>\n    <p>{`And if you try to apply function by the same way in `}<a parentName=\"p\" {...{\n        \"href\": \"/try#GYVwdgxgLglg9mABAWxAGwBQEMBciwjIBGApgE4A0iReBx5AlIgN4BQiiZJUIZSWiAFTUA3KwC+rVqkwAWAExUFDERzXqNiAPRbEgXg3AMjsBCKTsQBRMmThk8AFQCeABxKIARAHIFHt4hgBnP0g4ZCcsWCI0VwB3GCgAC0QoZ1c3OlIyN2l0DAUqNwU3FU1NU11La1tERxd3KDIQEl8AoIgQsIioxFiEpJT3dPIsmQx6xvzC4o0yiysbe363CDQsf0CAVX8hv0CYYNDwmEiYuMTk2rTCDOGc5dWNrbIWcQn5IrEgA\"\n      }}>{`Playground`}</a>{` then you will see that Hegel will reject invalid data types application and will notify you about the problem.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function mul(a: number, b: number) {\n  return a * b;\n}\n\nlet result = mul(42, 42); // ðŸ‘Œ!\n\n// Error: Type \"'42'\" is incompatible with type \"number\"\nresult = mul(42, \"42\");\n\n// Error: Type \"true\" is incompatible with type \"number\"\nresult = mul(true, \"42\");\n\n// Error: Type \"class User\" is incompatible with type \"number\"\nresult = mul(class User {}, \"42\");\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}