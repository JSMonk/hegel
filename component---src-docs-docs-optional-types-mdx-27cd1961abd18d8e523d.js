(this.webpackJsonp=this.webpackJsonp||[]).push([[18],{1333:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return u}));t(16),t(4),t(3),t(1),t(12),t(11),t(22);var a=t(57),o=t(63);t(36);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/docs/optional-types.mdx"}});var l={_frontmatter:i},p=o.a;function u(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["components"]);return Object(a.b)(p,r({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"optional-types"},"Optional Types"),Object(a.b)("hr",null),Object(a.b)("p",null,"Sometimes you need to include undefined to defined variable/object property. Optional type is a solution. It is not some separated type. It's special syntax for type that adds to any type additional value - undefined. You can create them by adding a question mark in front of the type name."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-typescript"}),"const givenAge = -5;\nconst userAge: ?number = givenAge > 0 ? givenAge : undefined;\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Warning"),": Unlike Flow.js, Hegel will throw an error if you try to assign ",Object(a.b)("inlineCode",{parentName:"p"},"null")," as value of an optional type"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-typescript"}),'// Error: Type "null" is incompatible with type "number | undefined"\nconst someValue: ?number = null;\n')),Object(a.b)("p",null,"Optional type is not only about undefined variables or object properties.\nYou can use it inside function argument definition to annotate optional argument."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-typescript"}),'function doSomething(optionalArg: ?number) {}\n\ndoSomething(); // ðŸ‘Œ!\ndoSomething(42); // ðŸ‘Œ!\ndoSomething(undefined); // ðŸ‘Œ!\n\n// Error: Type "null" is incompatible with type "number | undefined"\ndoSomething(null);\n')),Object(a.b)("p",null,"Also you can use it inside object type definition to annotate optional property."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-typescript"}),'let user: { name: ?string } = { name: "Arya Stark" };\n\nuser.name = undefined; // ðŸ‘Œ!\nuser.name = "Arya Stark"; // ðŸ‘Œ!\n\n// Error: Type "null" is incompatible with type "number | undefined"\nuser.name = null;\n\nuser = {}; // ðŸ‘Œ!\nuser = { name: "Arya Stark" }; // ðŸ‘Œ!\nuser = { name: undefined }; // ðŸ‘Œ!\n\n// Error: Type "{ name: null }" is incompatible with type "{ name: string | undefined }"\nuser = { name: null };\n')))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/docs/optional-types.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-docs-optional-types-mdx-27cd1961abd18d8e523d.js.map