{"version":3,"sources":["webpack:///../src/docs/docs/object-types.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ocAMO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBACA,gRAC8F,0BAAYC,WAAW,KAAvB,KAD9F,oBACgK,0BAAYA,WAAW,KAAvB,KADhK,iCAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,qHAOL,iBAAQ,CACN,GAAM,gCADR,gCAGA,kLACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6TAaL,0FAAyE,0BAAYA,WAAW,KAAvB,OAAzE,gIACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0JAQL,8BACE,iBAAGA,WAAW,cAAd,uHAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kIAOL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wJASL,iBAAQ,CACN,GAAM,mCADR,mCAGA,4CAA2B,mBAAGA,WAAW,KAAQ,CAC7C,KAAQ,yBADe,kBAA3B,4DAEwF,0BAAYA,WAAW,KAAvB,KAFxF,yCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sGAML,8TACA,8BACE,iBAAGA,WAAW,cAAd,2JAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sGAML,uLACA,iBAAQ,CACN,GAAM,UADR,UAGA,6CAA4B,0BAAYA,WAAW,KAAvB,UAA5B,6DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,ya,8MAqBTJ,EAAWK,gBAAiB","file":"component---src-docs-docs-object-types-mdx-d3ac0ef721efff213200.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/hegel/hegel/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"object-types\"\n    }}>{`Object Types`}</h1>\n    <hr></hr>\n    <p>{`Object is another fundamental part of JavaScript language. With object you can represent any composed data types as sequence of properties and values.\nYou can create object type in Hegel by using curly braces {} and name-value pairs using a colon `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` split by commas `}<inlineCode parentName=\"p\">{`,`}</inlineCode>{` (the same as in JavaScript).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const user: { email: string; password: string } = {\n  email: \"any.user@gmail.com\",\n  password: \"qwerty\",\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"strict-and-soft-object-types\"\n    }}>{`Strict and Soft object types`}</h2>\n    <p>{`Defined object type is strict by default, it means that you cannot define additional property in object literal if it was not defined inside object type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`/* Error: Type \"{\n  email: 'any.user@gmail.com',\n  password: 'qwerty',\n  status: 'offline'\n}\" is incompatible with type \"{ email: string, password: string }\" */\nconst strictUser: { email: string; password: string } = {\n  email: \"any.user@gmail.com\",\n  password: \"qwerty\",\n  status: \"offline\",\n};\n`}</code></pre>\n    <p>{`To make defined object type as soft you can add special statement `}<inlineCode parentName=\"p\">{`...`}</inlineCode>{` (three dots). This statement will give Hegel information that you want to include additional properties inside object type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const softUser: { email: string, password: string, ... } = { // ðŸ‘Œ!\n  email: \"any.user@gmail.com\",\n  password: \"qwerty\",\n  status: \"offline\"\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you are familiar with Flow.js, in Flow.js this two examples (strict and soft object types) will look like this:`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const strictUser: {| email: string, password: string |} = { // ðŸ‘Œ!\n  name: \"any.user@gmail.com\",\n  password: \"qwerty\"\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const softUser: { email: string; password: string } = {\n  // ðŸ‘Œ!\n  name: \"any.user@gmail.com\",\n  password: \"qwerty\",\n  status: \"offline\",\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"optional-object-type-properties\"\n    }}>{`Optional object type properties`}</h2>\n    <p>{`As was mentioned in `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/optional-types\"\n      }}>{`Optional Types`}</a>{`, you can define object properties as optional by adding `}<inlineCode parentName=\"p\">{`?`}</inlineCode>{`(question mark) before the type name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const user: { email: string; password: ?string } = {\n  email: \"any.user@gmail.com\",\n}; // ðŸ‘Œ!\n`}</code></pre>\n    <p>{`The logic is next - if you try to access to property which does not exist in object then value of this property will be undefined. Optional Types annotate that type of argument/variable/property can have annotated type value or undefined, so, undefined will be a valid value for this property.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you are familiar with Flow.js or TypeScript, you may know about similar optional property syntax inside this two \"analyzers\", which look like this:`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const user: { email: string; password?: string } = {\n  email: \"any.user@gmail.com\",\n}; // ðŸ‘Œ!\n`}</code></pre>\n    <p>{`But Hegel doesn't have this syntax and define the same syntax for two situations (when your property is optional and when your property can contain undefined.`}</p>\n    <h2 {...{\n      \"id\": \"object\"\n    }}>{`Object`}</h2>\n    <p>{`Also, Hegel supports `}<inlineCode parentName=\"p\">{`Object`}</inlineCode>{` type which represents any possible object in JavaScript:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function json(obj: Object) {\n  return JSON.stringify(obj);\n}\n\nlet result = json({ baz: 3.14, bar: \"hello\" }); // ðŸ‘Œ!\nresult = json({}); // ðŸ‘Œ!\nresult = json(new Object()); // ðŸ‘Œ!\n// Because Array is an object in JavaScript\nresult = json([]); // ðŸ‘Œ!\n// Because Function is an object in JavaScript\nresult = json(() => 2); // ðŸ‘Œ!\n\n// Error: Type \"2\" is incompatible with type \"Object\"\nresult = json(2);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}