{"version":3,"sources":["webpack:///../src/docs/docs/class-types.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mcAMO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,uBACA,6QACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,0SAiBL,iBAAQ,CACN,GAAM,iBADR,iBAGA,gCAAe,mBAAGA,WAAW,KAAQ,CACjC,KAAQ,yBADG,kBAAf,+DAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,skBAkBL,iBAAQ,CACN,GAAM,gBADR,gBAGA,6GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,ynBAmBL,8EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,ylBAoBL,8BACE,iBAAGA,WAAW,cAAd,oGAAgI,0BAAYA,WAAW,KAAvB,UAAhI,KAAwL,0BAAYA,WAAW,KAAvB,WAAxL,OAAmP,0BAAYA,WAAW,KAAvB,aAAnP,MAEF,iBAAQ,CACN,GAAM,kBADR,kBAGA,mJACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mvB,6MA2BTJ,EAAWK,gBAAiB","file":"component---src-docs-docs-class-types-mdx-3f544708b356efd19741.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/hegel/hegel/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"class-types\"\n    }}>{`Class Types`}</h1>\n    <hr></hr>\n    <p>{`The same as in other \"analyzers\" Hegel doesn't provide a special syntax for class (only type syntax for properties and methods). You can define class the same as in JavaScript, but Hegel will create a type for this class and it's constructor.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class User {\n  name: string;\n  password: string;\n\n  constructor(name: string, password: string): User {\n    this.name = name;\n    this.password = password;\n  }\n}\n\nconst user: User = new User(\"any.user@gmail.com\", \"qwerty\");\n\n// Type is \"class User\"\nconst UserConstructor = User;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-methods\"\n    }}>{`Class Methods`}</h2>\n    <p>{`As with `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/function-types\"\n      }}>{`Function Types`}</a>{`, Hegel provides syntax for argument types and return type;`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class Fighter {\n  tellTheRules(isNewbee: boolean): string {\n    return isNewbee\n      ? \"I don't know the rules.\"\n      : \\`\n      1. You do not talk about Fight Club.\n      2. You DO NOT talk about Fight Club.\n      3. If someone yells ‚Äústop!‚Äù, goes limp, or taps out, the fight is over.\n      4. Only two guys to a fight.\n      5. One fight at a time, fellas.\n      6. The fights are bare knuckle. No shirt, no shoes, no weapons.\n      7. Fights will go on as long as they have to.\n      8. If this is your first time at Fight Club, you have to fight.\\`;\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-fields\"\n    }}>{`Class Fields`}</h2>\n    <p>{`If you want to use a class field you must define it first and give it an annotation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class Fighter {\n  tellTheRules(): string {\n    // Error: Property \"isNewbie\" does not exist in \"Fighter\"\n    return this.isNewbie\n      ? \"I don't know the rules.\"\n      : \\`\n      1. You do not talk about Fight Club.\n      2. You DO NOT talk about Fight Club.\n      3. If someone yells ‚Äústop!‚Äù, goes limp, or taps out, the fight is over.\n      4. Only two guys to a fight.\n      5. One fight at a time, fellas.\n      6. The fights are bare knuckle. No shirt, no shoes, no weapons.\n      7. Fights will go on as long as they have to.\n      8. If this is your first time at Fight Club, you have to fight.\\`;\n  }\n}\n`}</code></pre>\n    <p>{`You can define class fields inside the body of class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class Fighter {\n  isNewbie: boolean = true;\n\n  tellTheRules(): string {\n    return this.isNewbie\n      ? \"I don't know the rules.\"\n      : \\`\n      1. You do not talk about Fight Club.\n      2. You DO NOT talk about Fight Club.\n      3. If someone yells ‚Äústop!‚Äù, goes limp, or taps out, the fight is over.\n      4. Only two guys to a fight.\n      5. One fight at a time, fellas.\n      6. The fights are bare knuckle. No shirt, no shoes, no weapons.\n      7. Fights will go on as long as they have to.\n      8. If this is your first time at Fight Club, you have to fight.\\`;\n  }\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you are already familiar with TypeScript, Hegel does not provide accessibility modifiers like `}<inlineCode parentName=\"p\">{`public`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`private`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`protected`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"static-members\"\n    }}>{`Static Members`}</h2>\n    <p>{`The same as in JavaScript, static members of class will be inside the class constructor and not inside the class instance.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class FightClub {\n  static tellTheRules(): string {\n    return \\`\n      1. You do not talk about Fight Club.\n      2. You DO NOT talk about Fight Club.\n      3. If someone yells ‚Äústop!‚Äù, goes limp, or taps out, the fight is over.\n      4. Only two guys to a fight.\n      5. One fight at a time, fellas.\n      6. The fights are bare knuckle. No shirt, no shoes, no weapons.\n      7. Fights will go on as long as they have to.\n      8. If this is your first time at Fight Club, you have to fight.\\`;\n  }\n}\n\nconst fightClubRules = FightClub.tellTheRules(); // üëå!\n\nconst fightClubInNYC = new FightClub();\n\n// Error: Property \"tellTheRules\" does not exist in \"FightClub\"\nconst localFightClubRules = fightClubInNYC.tellTheRules();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}