{"version":3,"sources":["webpack:///../src/docs/docs/optional-types.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ocAMO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBACA,2TACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,0FAKL,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,oEAAmH,0BAAYA,WAAW,KAAvB,QAAnH,iCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6GAKL,qLAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kOAWL,yGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,ob,gNAqBTJ,EAAWK,gBAAiB","file":"component---src-docs-docs-optional-types-mdx-27cd1961abd18d8e523d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/hegel/hegel/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"optional-types\"\n    }}>{`Optional Types`}</h1>\n    <hr></hr>\n    <p>{`Sometimes you need to include undefined to defined variable/object property. Optional type is a solution. It is not some separated type. It's special syntax for type that adds to any type additional value - undefined. You can create them by adding a question mark in front of the type name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const givenAge = -5;\nconst userAge: ?number = givenAge > 0 ? givenAge : undefined;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Warning`}</strong>{`: Unlike Flow.js, Hegel will throw an error if you try to assign `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` as value of an optional type`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Error: Type \"null\" is incompatible with type \"number | undefined\"\nconst someValue: ?number = null;\n`}</code></pre>\n    <p>{`Optional type is not only about undefined variables or object properties.\nYou can use it inside function argument definition to annotate optional argument.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function doSomething(optionalArg: ?number) {}\n\ndoSomething(); // ðŸ‘Œ!\ndoSomething(42); // ðŸ‘Œ!\ndoSomething(undefined); // ðŸ‘Œ!\n\n// Error: Type \"null\" is incompatible with type \"number | undefined\"\ndoSomething(null);\n`}</code></pre>\n    <p>{`Also you can use it inside object type definition to annotate optional property.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`let user: { name: ?string } = { name: \"Arya Stark\" };\n\nuser.name = undefined; // ðŸ‘Œ!\nuser.name = \"Arya Stark\"; // ðŸ‘Œ!\n\n// Error: Type \"null\" is incompatible with type \"number | undefined\"\nuser.name = null;\n\nuser = {}; // ðŸ‘Œ!\nuser = { name: \"Arya Stark\" }; // ðŸ‘Œ!\nuser = { name: undefined }; // ðŸ‘Œ!\n\n// Error: Type \"{ name: null }\" is incompatible with type \"{ name: string | undefined }\"\nuser = { name: null };\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}